<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>za.co.wernerm</groupId>
	<artifactId>squekyclean</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<properties>
		<keepRunning>false</keepRunning>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
		<db.user>admin</db.user>
		<db.password>admin</db.password>
        <db.database>squekyclean</db.database>
		<env.AWS_ACCESS_KEY_ID>AKIAJP7WT5IRY7BIKJHA</env.AWS_ACCESS_KEY_ID>
		<env.AWS_SECRET_ACCESS_KEY>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</env.AWS_SECRET_ACCESS_KEY>
	</properties>

	<name>squekyclean</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.6.RELEASE</version>
		<relativePath/>
	</parent>

	<dependencies>
		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>9.1-901-1.jdbc4</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
			<version>4.1.2</version>
		</dependency>
		<dependency>
			<groupId>com.amazonaws</groupId>
			<artifactId>aws-java-sdk-sns</artifactId>
			<version>1.11.195</version>
		</dependency>


	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
            <plugin>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.0.0</version>
                <configuration>
                    <filesets>
                        <fileset>
                            <directory>src/main/resources/static</directory>
                            <followSymlinks>false</followSymlinks>
                        </fileset>
                    </filesets>
                </configuration>
            </plugin>


			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<version>1.0.0</version>
				<executions>
					<execution>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>write-project-properties</goal>
						</goals>
						<configuration>
							<outputFile>${project.basedir}/target/debug.properties</outputFile>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.14.2</version>
				<configuration>
					<useColor>true</useColor>
					<images>
						<image>
							<alias>sq-postgres</alias>
							<name>postgres:9.5</name>
							<run>
								<ports>
									<port>5432:5432</port>
								</ports>
								<env>
									<POSTGRES_DB>${db.database}</POSTGRES_DB>
									<POSTGRES_USER>${db.user}</POSTGRES_USER>
									<POSTGRES_PASSWORD>${db.password}</POSTGRES_PASSWORD>
								</env>
								<wait>
									<tcp>
										<ports>
											<port>5432</port>
										</ports>
									</tcp>
									<time>60000</time>
								</wait>
								<log>
									<prefix>${project.artifactId}-POSTGRES</prefix>
									<color>cyan</color>
								</log>
							</run>
						</image>
						<image>
							<alias>${project.parent.artifactId}</alias>
							<name>wernerm/${project.artifactId}:${project.version}</name>
							<build>
								<from>openjdk:alpine</from>
								<ports>
									<port>8080</port>
								</ports>
								<entryPoint>
									<!-- exec form for ENTRYPOINT -->
									<exec>
										<arg>java</arg>
										<arg>-jar</arg>
										<arg>/opt/service/${project.build.finalName}.jar</arg>
									</exec>
								</entryPoint>
								<assembly>
									<mode>dir</mode>
									<basedir>/opt/service</basedir>
									<descriptor>assembly.xml</descriptor>
								</assembly>
							</build>
							<run>
								<namingStrategy>alias</namingStrategy>
								<ports>
									<port>${service.host.address}:9090:8080</port>
								</ports>
								<env>
									<AWS_ACCESS_KEY_ID>${env.AWS_ACCESS_KEY_ID}</AWS_ACCESS_KEY_ID>
									<AWS_SECRET_ACCESS_KEY>${env.AWS_SECRET_ACCESS_KEY}</AWS_SECRET_ACCESS_KEY>
								</env>
								<wait>
									<http>
										<url>http://${service.host.address}:9090</url>
									</http>
									<time>100000</time>
								</wait>
								<log>
									<prefix>${project.artifactId}</prefix>
									<color>cyan</color>
								</log>
								<links>
									<link>sq-postgres:sq-postgres</link>
								</links>
							</run>
						</image>
					</images>
					<removeVolumes>true</removeVolumes>
				</configuration>
				<executions>
					<execution>
						<id>start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>stop</goal>
							<goal>build</goal>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
						<configuration combine.children="append">
							<keepRunning>${keepRunning}</keepRunning>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<argLine>${argLine}</argLine>
					<excludedGroups>za.co.wernerm.squekyclean.util.IntegrationTestCategory</excludedGroups>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.19.1</version>
				<configuration>
					<argLine>${argLine}</argLine>
					<includes>
						<include>**/*.java</include>
					</includes>
					<groups>za.co.wernerm.squekyclean.util.IntegrationTestCategory</groups>
					<systemPropertyVariables>
						<!--
                        Injected by docker plugin during `pre-integration-test`.
                        Requires full `integration-test` or `verify`,
                        not just `failsafe:integration-test`.
                        -->
						<db.host>localhost</db.host>
						<db.port>5432</db.port>
						<db.database>${db.database}</db.database>
						<service.host.address> ${service.host.address}</service.host.address>
						<service.host.port>${service.host.port}</service.host.port>
					</systemPropertyVariables>
				</configuration>
				<executions>
					<execution>
						<id>integration-test</id>
						<phase>integration-test</phase>
						<goals>
							<goal>integration-test</goal>
						</goals>
					</execution>
					<execution>
						<id>verify</id>
						<phase>verify</phase>
						<goals>
							<goal>verify</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

    <profiles>
        <profile>
        <id>debug</id>
            <properties>
                <keepRunning>true</keepRunning>
            </properties>
        </profile>
		<profile>
			<id>with-frontend</id>
		<build>
			<plugins>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.3.2</version>
					<configuration>
						<workingDirectory>src/main/webapp</workingDirectory>
					</configuration>
					<executions>
						<execution>
							<id>ng build</id>
							<goals>
								<goal>exec</goal>
							</goals>
							<phase>generate-sources</phase>
							<configuration>
								<executable>ng</executable>
								<arguments>
									<argument>build</argument>
									<argument>--prod</argument>
									<argument>--aot</argument>
								</arguments>
							</configuration>
						</execution>
					</executions>
				</plugin>
			</plugins>
		</build>
		</profile>
    </profiles>

</project>
